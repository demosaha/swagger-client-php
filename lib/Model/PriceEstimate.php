<?php
/**
 * PriceEstimate
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */
/**
 *  Copyright 2016 SmartBear Software
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
/**
 * PriceEstimate Class Doc Comment
 *
 * @category    Class
 * @description 
 * @package     Swagger\Client
 * @author      http://github.com/swagger-api/swagger-codegen
 * @license     http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class PriceEstimate implements ArrayAccess
{
    /**
      * Array of property to type mappings. Used for (de)serialization 
      * @var string[]
      */
    static $swaggerTypes = array(
        'product_id' => 'string',
        'currency_code' => 'string',
        'display_name' => 'string',
        'estimate' => 'string',
        'low_estimate' => 'Number',
        'high_estimate' => 'Number',
        'surge_multiplier' => 'Number'
    );
  
    static function swaggerTypes() {
        return self::$swaggerTypes;
    }

    /** 
      * Array of attributes where the key is the local name, and the value is the original name
      * @var string[] 
      */
    static $attributeMap = array(
        'product_id' => 'product_id',
        'currency_code' => 'currency_code',
        'display_name' => 'display_name',
        'estimate' => 'estimate',
        'low_estimate' => 'low_estimate',
        'high_estimate' => 'high_estimate',
        'surge_multiplier' => 'surge_multiplier'
    );
  
    static function attributeMap() {
        return self::$attributeMap;
    }

    /**
      * Array of attributes to setter functions (for deserialization of responses)
      * @var string[]
      */
    static $setters = array(
        'product_id' => 'setProductId',
        'currency_code' => 'setCurrencyCode',
        'display_name' => 'setDisplayName',
        'estimate' => 'setEstimate',
        'low_estimate' => 'setLowEstimate',
        'high_estimate' => 'setHighEstimate',
        'surge_multiplier' => 'setSurgeMultiplier'
    );
  
    static function setters() {
        return self::$setters;
    }

    /**
      * Array of attributes to getter functions (for serialization of requests)
      * @var string[]
      */
    static $getters = array(
        'product_id' => 'getProductId',
        'currency_code' => 'getCurrencyCode',
        'display_name' => 'getDisplayName',
        'estimate' => 'getEstimate',
        'low_estimate' => 'getLowEstimate',
        'high_estimate' => 'getHighEstimate',
        'surge_multiplier' => 'getSurgeMultiplier'
    );
  
    static function getters() {
        return self::$getters;
    }

    
    /**
      * $product_id Unique identifier representing a specific product for a given latitude & longitude. For example, uberX in San Francisco will have a different product_id than uberX in Los Angeles
      * @var string
      */
    protected $product_id;
    
    /**
      * $currency_code [ISO 4217](http://en.wikipedia.org/wiki/ISO_4217) currency code.
      * @var string
      */
    protected $currency_code;
    
    /**
      * $display_name Display name of product.
      * @var string
      */
    protected $display_name;
    
    /**
      * $estimate Formatted string of estimate in local currency of the start location. Estimate could be a range, a single number (flat rate) or \"Metered\" for TAXI.
      * @var string
      */
    protected $estimate;
    
    /**
      * $low_estimate Lower bound of the estimated price.
      * @var Number
      */
    protected $low_estimate;
    
    /**
      * $high_estimate Upper bound of the estimated price.
      * @var Number
      */
    protected $high_estimate;
    
    /**
      * $surge_multiplier Expected surge multiplier. Surge is active if surge_multiplier is greater than 1. Price estimate already factors in the surge multiplier.
      * @var Number
      */
    protected $surge_multiplier;
    

    /**
     * Constructor
     * @param mixed[] $data Associated array of property value initalizing the model
     */
    public function __construct(array $data = null)
    {
        if ($data != null) {
            $this->product_id = $data["product_id"];
            $this->currency_code = $data["currency_code"];
            $this->display_name = $data["display_name"];
            $this->estimate = $data["estimate"];
            $this->low_estimate = $data["low_estimate"];
            $this->high_estimate = $data["high_estimate"];
            $this->surge_multiplier = $data["surge_multiplier"];
        }
    }
    
    /**
     * Gets product_id
     * @return string
     */
    public function getProductId()
    {
        return $this->product_id;
    }
  
    /**
     * Sets product_id
     * @param string $product_id Unique identifier representing a specific product for a given latitude & longitude. For example, uberX in San Francisco will have a different product_id than uberX in Los Angeles
     * @return $this
     */
    public function setProductId($product_id)
    {
        
        $this->product_id = $product_id;
        return $this;
    }
    
    /**
     * Gets currency_code
     * @return string
     */
    public function getCurrencyCode()
    {
        return $this->currency_code;
    }
  
    /**
     * Sets currency_code
     * @param string $currency_code [ISO 4217](http://en.wikipedia.org/wiki/ISO_4217) currency code.
     * @return $this
     */
    public function setCurrencyCode($currency_code)
    {
        
        $this->currency_code = $currency_code;
        return $this;
    }
    
    /**
     * Gets display_name
     * @return string
     */
    public function getDisplayName()
    {
        return $this->display_name;
    }
  
    /**
     * Sets display_name
     * @param string $display_name Display name of product.
     * @return $this
     */
    public function setDisplayName($display_name)
    {
        
        $this->display_name = $display_name;
        return $this;
    }
    
    /**
     * Gets estimate
     * @return string
     */
    public function getEstimate()
    {
        return $this->estimate;
    }
  
    /**
     * Sets estimate
     * @param string $estimate Formatted string of estimate in local currency of the start location. Estimate could be a range, a single number (flat rate) or \"Metered\" for TAXI.
     * @return $this
     */
    public function setEstimate($estimate)
    {
        
        $this->estimate = $estimate;
        return $this;
    }
    
    /**
     * Gets low_estimate
     * @return Number
     */
    public function getLowEstimate()
    {
        return $this->low_estimate;
    }
  
    /**
     * Sets low_estimate
     * @param Number $low_estimate Lower bound of the estimated price.
     * @return $this
     */
    public function setLowEstimate($low_estimate)
    {
        
        $this->low_estimate = $low_estimate;
        return $this;
    }
    
    /**
     * Gets high_estimate
     * @return Number
     */
    public function getHighEstimate()
    {
        return $this->high_estimate;
    }
  
    /**
     * Sets high_estimate
     * @param Number $high_estimate Upper bound of the estimated price.
     * @return $this
     */
    public function setHighEstimate($high_estimate)
    {
        
        $this->high_estimate = $high_estimate;
        return $this;
    }
    
    /**
     * Gets surge_multiplier
     * @return Number
     */
    public function getSurgeMultiplier()
    {
        return $this->surge_multiplier;
    }
  
    /**
     * Sets surge_multiplier
     * @param Number $surge_multiplier Expected surge multiplier. Surge is active if surge_multiplier is greater than 1. Price estimate already factors in the surge multiplier.
     * @return $this
     */
    public function setSurgeMultiplier($surge_multiplier)
    {
        
        $this->surge_multiplier = $surge_multiplier;
        return $this;
    }
    
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset 
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->$offset);
    }
  
    /**
     * Gets offset.
     * @param  integer $offset Offset 
     * @return mixed 
     */
    public function offsetGet($offset)
    {
        return $this->$offset;
    }
  
    /**
     * Sets value based on offset.
     * @param  integer $offset Offset 
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        $this->$offset = $value;
    }
  
    /**
     * Unsets offset.
     * @param  integer $offset Offset 
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->$offset);
    }
  
    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) {
            return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        } else {
            return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this));
        }
    }
}
